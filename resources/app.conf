#@meta {desc: 'application CLI config', date: '2025-01-16'}

[cli]
apps = list: ${cli_config_default:apps},
  ${cli_deeplearn_default:apps},
  ${cli_deeplearn_crossval_default:apps},
  ${cli_deepnlp_default:apps},
  deepnlp_fac_text_classify_app,
  show_config_cli,
  app, tapp
cleanups = list: ${cli_config_default:cleanups},
  ${cli_deeplearn_default:cleanups},
  ${cli_deepnlp_default:cleanups},
  deepnlp_fac_text_classify_app,
  app
cleanup_removes = set: log_cli, deeplearn_fac_result_app, deeplearn_fac_pred_app

[log_cli]
#format = %%(asctime)s[%%(levelname)s]:%%(name)s: %%(message)s
#level = info
loggers = dict: {
  'zensols.sdoh.lm': 'info',
  'zensols.datdesc': 'info'}

# for multi-process apps, uncomment and remove the log_cli cleanup
[multiprocess_log_config]
section = log_cli

[config_cli]
expect = False
#cache_path = path: ${default:data_dir}/app-config.dat

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/escape.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deeplearn): resources/cli-crossval.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

[config_import]
references = list: conf_esc, default, package
sections = list: app_imp_conf

[app_imp_conf]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list:
    ^{override}, ^{config_path},
    resource(zensols.lmtask): resources/default.conf,
    resource(zensols.sdoh): resources/default.conf,
    ^{override}, ^{config_path},
    resource(zensols.sdoh): resources/pkg.conf,
    ^{config_path}, ^{override}

[app]
class_name = zensols.sdoh.Application

[app_decorator]
option_excludes = set: config_factory
option_overrides = dict: {
  'max_sents': {'long_name': 'max', 'short_name': 'm'},
  'use_progress_bar': {'long_name': 'progress', 'short_name': 'p'}}
mnemonic_overrides = dict: {
  'few_shot_process': 'fewshot',
  'test_process': 'testlm'}

[tapp]
class_name = zensols.lmtask.Application
task_factory = instance: lmtask_task_factory

[tapp_decorator]
option_excludes = set: config_factory, task_factory
option_overrides = dict: {
  'long_output': {'long_name': 'long', 'short_name': None},
  'max_sample': {'long_name': 'nsample', 'short_name': 'n'}}
mnemonic_includes = set: dataset_sample, train, show_trainer
mnemonic_overrides = dict: {
  'show_task': 'task',
  'show_trainer': 'trainer',
  'dataset_sample': 'sample',
  'train': 'trainlm'}
